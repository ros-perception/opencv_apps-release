%bcond_without weak_deps

%global __os_install_post %(echo '%{__os_install_post}' | sed -e 's!/usr/lib[^[:space:]]*/brp-python-bytecompile[[:space:]].*$!!g')
%global __provides_exclude_from ^/opt/ros/noetic/.*$
%global __requires_exclude_from ^/opt/ros/noetic/.*$

Name:           ros-noetic-opencv-apps
Version:        2.0.2
Release:        1%{?dist}%{?release_suffix}
Summary:        ROS opencv_apps package

License:        BSD
Source0:        %{name}-%{version}.tar.gz

Requires:       ros-noetic-cv-bridge
Requires:       ros-noetic-dynamic-reconfigure
Requires:       ros-noetic-image-transport
Requires:       ros-noetic-image-view
Requires:       ros-noetic-message-runtime
Requires:       ros-noetic-nodelet
Requires:       ros-noetic-roscpp
Requires:       ros-noetic-sensor-msgs
Requires:       ros-noetic-std-msgs
Requires:       ros-noetic-std-srvs
BuildRequires:  gcc-c++
BuildRequires:  glibc-devel
BuildRequires:  glibc-static
BuildRequires:  libstdc++-devel
BuildRequires:  libstdc++-static
BuildRequires:  ros-noetic-catkin
BuildRequires:  ros-noetic-compressed-image-transport
BuildRequires:  ros-noetic-cv-bridge
BuildRequires:  ros-noetic-dynamic-reconfigure
BuildRequires:  ros-noetic-image-proc
BuildRequires:  ros-noetic-image-transport
BuildRequires:  ros-noetic-message-generation
BuildRequires:  ros-noetic-nodelet
BuildRequires:  ros-noetic-rosbag
BuildRequires:  ros-noetic-roscpp
BuildRequires:  ros-noetic-roslaunch
BuildRequires:  ros-noetic-rosservice
BuildRequires:  ros-noetic-rostest
BuildRequires:  ros-noetic-rostopic
BuildRequires:  ros-noetic-sensor-msgs
BuildRequires:  ros-noetic-std-msgs
BuildRequires:  ros-noetic-std-srvs
BuildRequires:  ros-noetic-topic-tools
Provides:       %{name}-devel = %{version}-%{release}
Provides:       %{name}-doc = %{version}-%{release}
Provides:       %{name}-runtime = %{version}-%{release}

%description
opencv_apps provides various nodes that run internally OpenCV's functionalities
and publish the result as ROS topics. With opencv_apps, you can skip writing
OpenCV application codes for a lot of its functionalities by simply running a
launch file that corresponds to OpenCV's functionality you want. You can have a
look at all launch files provided here (be sure to choose the correct branch. As
of Sept. 2016 indigo branch is used for ROS Indigo, Jade, and Kinetic distros).
Some of the features covered by opencv_apps are explained in the wiki. The most
of code is originally taken from
https://github.com/Itseez/opencv/tree/master/samples/cpp

%prep
%autosetup

%build
# In case we're installing to a non-standard location, look for a setup.sh
# in the install tree that was dropped by catkin, and source it.  It will
# set things like CMAKE_PREFIX_PATH, PKG_CONFIG_PATH, and PYTHONPATH.
if [ -f "/opt/ros/noetic/setup.sh" ]; then . "/opt/ros/noetic/setup.sh"; fi
mkdir -p obj-%{_target_platform} && cd obj-%{_target_platform}
%cmake3 \
    -UINCLUDE_INSTALL_DIR \
    -ULIB_INSTALL_DIR \
    -USYSCONF_INSTALL_DIR \
    -USHARE_INSTALL_PREFIX \
    -ULIB_SUFFIX \
    -DCMAKE_INSTALL_LIBDIR="lib" \
    -DCMAKE_INSTALL_PREFIX="/opt/ros/noetic" \
    -DCMAKE_PREFIX_PATH="/opt/ros/noetic" \
    -DSETUPTOOLS_DEB_LAYOUT=OFF \
    -DCATKIN_BUILD_BINARY_PACKAGE="1" \
    ..

%make_build

%install
# In case we're installing to a non-standard location, look for a setup.sh
# in the install tree that was dropped by catkin, and source it.  It will
# set things like CMAKE_PREFIX_PATH, PKG_CONFIG_PATH, and PYTHONPATH.
if [ -f "/opt/ros/noetic/setup.sh" ]; then . "/opt/ros/noetic/setup.sh"; fi
%make_install -C obj-%{_target_platform}

%files
/opt/ros/noetic

%changelog
* Wed Aug 19 2020 Kei Okada <kei.okada@gmail.com> - 2.0.2-1
- Autogenerated by Bloom

